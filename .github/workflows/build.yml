## These options mostly follow the ones used in
## https://github.com/matplotlib/matplotlib/blob/main/.github/workflows/cibuildwheel.yml, though I
## try to be a little less complicated.


name: tests

on: [push]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} for ${{matrix.archs}}

    runs-on: ${{ matrix.os }}

    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        archs: ["auto"]
        include:
          - os: ubuntu-latest
            archs: "aarch64"

    env:
      CIBW_SKIP: cp27-* cp35-* cp36-* cp37-* pp* *-musllinux_aarch64
      CIBW_ARCHS: ${{matrix.archs}}
      CIBW_ARCHS_MACOS: "x86_64 universal2 arm64"
      CIBW_BEFORE_BUILD: python -c "print(('#'*130+'\n')*10)" && python -m pip install "numpy>=1.13"
      CIBW_TEST_REQUIRES: pytest pytest-cov
      CIBW_TEST_COMMAND: "pytest {project}/tests"

    steps:
      - name: Set up QEMU
        if: matrix.archs == 'aarch64'
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel

      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl


  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'

      - name: Build sdist
        run: |
          python -m pip install numpy>=1.13  # Can't rely on pep 517 to get it from pyproject.toml
          python setup.py sdist

      - name: Get version
        id: get_version
        run: |
          # Note: This requires numpy, so it must run after the build step
          export new_version=$(python -c 'import setup; print(setup.version)')
          echo "Found version ${new_version}"
          echo "::set-output name=version::${new_version}"

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz


  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: "github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[no release]')"
    # # upload to PyPI on every tag starting with 'v'
    # if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # # publish when a GitHub Release is created
    # if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/checkout@v2
        # Needed for the git actions

      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - name: Get latest version
        run: |
          export new_version=${{needs.build_sdist.outputs.version}}
          echo "new_version: '${new_version}'"
          echo "new_version=${new_version}" >> $GITHUB_ENV

      - name: Tag and push new version
        shell: bash
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a "v${new_version}" -m "Version ${new_version}"
          git status
          git push --follow-tags  # Will not trigger new workflow because it uses GITHUB_TOKEN

      - name: Create release
        if: "!contains(github.event.head_commit.message, '[no release]')"
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.new_version }}
          name: Release v${{ env.new_version }}
          draft: false
          prerelease: false

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
          # To test: repository_url: https://test.pypi.org/legacy/
