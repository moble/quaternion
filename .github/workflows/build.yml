## These options mostly follow the ones used in
## https://github.com/matplotlib/matplotlib/blob/main/.github/workflows/cibuildwheel.yml, though I
## try to be a little less complicated.


name: tests

on:
  push:
    branches:
      - main
    tags: '*'
  pull_request:

concurrency:
  group: test-${{ github.head_ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"
    
jobs:

  get_new_version:
    name: Get new version number
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.get_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.13'

      - name: Install Hatch
        shell: bash
        run: python -m pip install --disable-pip-version-check --upgrade hatch

      - name: Bump version
        id: get_version
        shell: bash
        env:
          github_event_head_commit_message: ${{ github.event.head_commit.message }}
        run: |
          # Note: The following line reads the HEAD commit message to look for an indication of how
          # to bump the version number.  Specifically, if `#patch`, `#minor`, or `#major` is present
          # in the commit message, it bumps the corresponding version number.  Those can also be
          # prepended as `#premajor`, etc., to add/bump the prerelease modifier.  If none of those
          # are present, `#patch` is assumed â€” that is, the lowest-significance number is
          # incremented.  See the documentation of the `hatch version` command for details.
          export version_bump_rule=$(python .github/scripts/parse_bump_rule.py)
          echo "version_bump_rule: '${version_bump_rule}'"
          hatch version "${version_bump_rule}"
          export new_version=$(TERM="unknown" hatch version)
          echo "new_version: '${new_version}'"
          echo "new_version=${new_version}" >> "$GITHUB_OUTPUT"  # Save variable for later steps


  build_sdist:
    needs: get_new_version
    name: Build source distribution
    runs-on: ubuntu-latest

    if: >-
        !contains(github.event.head_commit.message, '[skip ci]')
        && !contains(github.event.head_commit.message, '[skip tests]')

    steps:
      - name: 'Check out code'
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.13'

      - name: Update versions
        shell: bash
        run: |
          export new_version=${{needs.get_new_version.outputs.new_version}}
          echo "Updating version to '${new_version}'"
          python .github/scripts/update_versions.py

      - name: Build sdist
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade "setuptools>=61" wheel "numpy>=2.0,<3"
          python setup.py sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz


  merge_artifacts:
    runs-on: ubuntu-latest
    needs: build_sdist
    steps:
      - name: Merge artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: merged-dist


  upload_pypi:
    needs: [get_new_version, merge_artifacts]
    name: Tag and release
    runs-on: ubuntu-latest
    # if: >-
    #     github.ref == 'refs/heads/main'
    #     && !contains(github.event.head_commit.message, '[no release]')
    #     && (success() || contains(github.event.head_commit.message, '[skip tests]'))
    environment: release
    permissions: write-all
      # actions: write
      # checks: write
      # contents: write
      # deployments: write
      # id-token: write
      # issues: write
      # discussions: write
      # packages: write
      # pages: write
      # pull-requests: write
      # repository-projects: write
      # security-events: write
      # statuses: write

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: merged-dist
          path: dist

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.13'

      - name: Install Hatch
        shell: bash
        run: python -m pip install --disable-pip-version-check --upgrade hatch

      - name: Update versions
        shell: bash
        run: |
          export new_version=${{needs.get_new_version.outputs.new_version}}
          echo "Updating version to '${new_version}'"
          python .github/scripts/update_versions.py

      - name: Tag and push new version
        shell: bash
        run: |
          export new_version=${{needs.get_new_version.outputs.new_version}}
          git config user.name github-actions
          git config user.email github-actions@github.com
          git commit -m "Update version for new release" pyproject.toml setup.py src/quaternion/__init__.py
          git tag -a "v${new_version}" -m "Version ${new_version}"
          git status
          #git push --follow-tags  # Will not trigger new workflow because it uses GITHUB_TOKEN

      # - name: Create release
      #   if: "!contains(github.event.head_commit.message, '[no release]')"
      #   id: create_release
      #   uses: softprops/action-gh-release@v2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: v${{ needs.get_new_version.outputs.new_version }}
      #     name: Release v${{ needs.get_new_version.outputs.new_version }}
      #     draft: false
      #     prerelease: false

      - name: Publish to PyPI
        if: "!contains(github.event.head_commit.message, '[no pypi]')"
        env:
          # 1) Get key from https://pypi.org/manage/account/token/
          # 2) Copy it to Github > repo > Settings > Secrets
          HATCH_INDEX_USER: __token__
          HATCH_INDEX_AUTH: ${{ secrets.TESTPYPI_TOKEN }}
        shell: bash
        run: |
          hatch publish -r test
